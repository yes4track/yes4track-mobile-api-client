{
  "openapi": "3.0.1",
  "info": {
    "title": "Caspian.Yes4Track.Service API",
    "description": "Caspian.Yes4Track.Service API",
    "termsOfService": "https://github.com/",
    "contact": {
      "name": "Administrator",
      "url": "https://github.com/jefersonmlopes",
      "email": "admin@yes4track.com"
    },
    "license": {
      "name": "Use under MIT License",
      "url": "https://github.com/"
    },
    "version": "v1"
  },
  "paths": {
    "/yes4track/v1/adventures/{id}": {
      "delete": {
        "tags": [
          "Adventure"
        ],
        "summary": "Delete Adventure by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "68150de7-fef4-455c-aeef-ee6d455a59fe"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Adventure"
        ],
        "summary": "Get Adventure by id",
        "operationId": "GetByIdAdventure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "5f5ede6d-78ac-4654-8e76-cea12f297e62"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllAdventureResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "Adventure"
        ],
        "summary": "Update part of Adventure",
        "description": "Sample request:\r\n            \r\n    PATCH /yes4track/v1/adventures/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "32148732-bfc9-4fd4-9587-778dd6dc2b37"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "Adventure"
        ],
        "summary": "Update Adventure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f9e5f1be-5cd9-40a6-befe-9b13d571e475"
            }
          }
        ],
        "requestBody": {
          "description": "Adventure to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutAdventureRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/experiences/{experienceId}": {
      "delete": {
        "tags": [
          "Adventure"
        ],
        "summary": "Delete Adventure Experience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id Adventure",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id Adventure",
              "format": "uuid"
            }
          },
          {
            "name": "experienceId",
            "in": "path",
            "description": "Id Experience",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id Experience",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "58f301b8-3a2c-4dfd-a25a-d98466ae5e79"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Adventure"
        ],
        "summary": "Add Adventure Experience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id Adventure",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id Adventure",
              "format": "uuid"
            }
          },
          {
            "name": "experienceId",
            "in": "path",
            "description": "Id Experience",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id Experience",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "91382187-a611-4c4c-a7e6-b2edc78a676a"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/images/{imageId}": {
      "delete": {
        "tags": [
          "Adventure"
        ],
        "summary": "Delete Adventure by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure id",
              "format": "uuid"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "Adventure Image id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Image id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f2929e2e-87da-4415-b564-d071527f8658"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/likes": {
      "delete": {
        "tags": [
          "Adventure"
        ],
        "summary": "Delete Adventure Likes by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "6e5df5a5-f471-4006-8bdc-faa7319b04b9"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Adventure"
        ],
        "summary": "Get All Adventure Likes by filter with pagination",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Id",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "9949e61c-711d-40b5-9c14-b5aac57cc326"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedAdventureLikesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Adventure"
        ],
        "summary": "Create Adventure Likes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "ea453e1a-6bd1-4504-aaac-dca1d1629c3c"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAdventureLikesResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/videos/{videoId}": {
      "delete": {
        "tags": [
          "Adventure"
        ],
        "summary": "Delete Adventure by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure id",
              "format": "uuid"
            }
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Adventure Video id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Video id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "9b4d57e3-d567-42a1-a6ef-b4e32b918df5"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/adventures": {
      "get": {
        "tags": [
          "Adventure"
        ],
        "summary": "Get All Adventure by filter with pagination",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "level",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LevelType"
            }
          },
          {
            "name": "codeRequired",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "52a05464-52ad-4117-a521-a8a778da8ea0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedAdventureResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Adventure"
        ],
        "summary": "Create Adventure",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "45b1e264-0b1e-4e40-99aa-22f01fef2071"
            }
          }
        ],
        "requestBody": {
          "description": "Adventure to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAdventureRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAdventureResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/code": {
      "get": {
        "tags": [
          "Adventure"
        ],
        "summary": "Get Adventure Code by id",
        "operationId": "GetByIdAdventureCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "d80d482a-22ea-4acb-968d-aa63d01ce9c1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdAdventureCodeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/likes/{likeId}": {
      "get": {
        "tags": [
          "Adventure"
        ],
        "summary": "Get Adventure Like by id",
        "operationId": "GetByIdAdventureLikes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Id",
              "format": "uuid"
            }
          },
          {
            "name": "likeId",
            "in": "path",
            "description": "Adventure Like Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Like Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "e60da7fd-d7f3-4b8a-9be6-748cb9884163"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllAdventureLikesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the usr isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existene of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/activate": {
      "post": {
        "tags": [
          "Adventure"
        ],
        "summary": "Activate Adventure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "c54b8450-2632-4c42-a38c-b94a59e666de"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/images": {
      "post": {
        "tags": [
          "Adventure"
        ],
        "summary": "Add images in adventure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "12d88dba-2117-44fb-96a5-9cd3c730f2d2"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/videos": {
      "post": {
        "tags": [
          "Adventure"
        ],
        "summary": "Add videos in adventure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "eeb9ec87-a031-4fd7-bf95-62c3ade16af3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/adventures/{id}/code/{code}/check": {
      "post": {
        "tags": [
          "Adventure"
        ],
        "summary": "Check Adventure Code",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Adventure id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure id",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Adventure Code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adventure Code"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "1d8a59c9-7a0d-4e5d-a790-bf4f4be12360"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCheckAdventureCodeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/audits": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get All Audit by filter with pagination",
        "parameters": [
          {
            "name": "parentId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "entity",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "action",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ActionType"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userCreated",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "userUpdated",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "c7362064-c77f-408e-9ff7-82efd3b2b713"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedAuditResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/cards/{id}": {
      "delete": {
        "tags": [
          "Card"
        ],
        "summary": "Delete Card by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Card id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Card id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "5b4430ae-b30d-4085-8bbd-dee87e287202"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Get Card by id",
        "operationId": "GetByIdCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Card id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Card id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f76070a7-094d-48f7-b977-6f5cd732ce6e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllCardResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "Card"
        ],
        "summary": "Update part of Card",
        "description": "Sample request:\r\n            \r\n    PATCH /yes4track/v1/Card/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Card id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Card id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "fb0cf47c-b9c6-422e-8a41-e5fc3467ab19"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "Card"
        ],
        "summary": "Update Card",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Card Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Card Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "0e8ee390-927a-4b19-8bc0-4fb981cbaae5"
            }
          }
        ],
        "requestBody": {
          "description": "Card to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutCardRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/cards": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Get All Card by filter with pagination",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CardType"
            }
          },
          {
            "name": "active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "b975020c-e62e-4471-b1ab-3a22ad190a3e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedCardResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Card"
        ],
        "summary": "Create Card",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "063e1bc1-1d36-4cc5-8efe-cd4d6b5c1a78"
            }
          }
        ],
        "requestBody": {
          "description": "Card to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCardResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/companies/{id}": {
      "delete": {
        "tags": [
          "Company"
        ],
        "summary": "Delete Company by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "834d3360-cc04-43a5-8ee6-86a7388b05c4"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get Company by id",
        "operationId": "GetByIdCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "fc0bd2d7-38c3-4dd4-aa9d-582b8cb8f11a"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllCompanyResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Update part of Company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "c495746a-ca8a-47f0-bbbd-4533f9fdf248"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "Company"
        ],
        "summary": "Update Company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "c91ceee1-f320-4663-a8d9-704b6b6b8993"
            }
          }
        ],
        "requestBody": {
          "description": "Company to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutCompanyRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/companies": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get All Company by filter with pagination",
        "parameters": [
          {
            "name": "legalName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "fantasyName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "registrationNumber",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "contactEmail",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "0e0cc2dd-0845-4a19-a7ff-d34fa9b424b3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedCompanyResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create Company",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "6a8cea44-65ca-4cc4-8368-08eb8729e714"
            }
          }
        ],
        "requestBody": {
          "description": "Company to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCompanyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCompanyResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/experiences/{id}": {
      "delete": {
        "tags": [
          "Experience"
        ],
        "summary": "Delete Experience by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "a2fd6cb6-467e-4e81-9ebd-5a53867fcee0"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Experience"
        ],
        "summary": "Get Experience by id",
        "operationId": "GetByIdExperience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "bdc09e92-70ee-44bf-b814-48b893c2f6ed"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllExperienceResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "Experience"
        ],
        "summary": "Update part of Experience",
        "description": "Sample request:\r\n            \r\n    PATCH /yes4track/v1/Experience/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f37d1981-62a0-45b8-aa8c-436b79d52546"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "Experience"
        ],
        "summary": "Update Experience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "d4c59139-cc0e-476c-ad60-a98b6f16aea0"
            }
          }
        ],
        "requestBody": {
          "description": "Experience to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutExperienceRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/experiences/{id}/images/{imageId}": {
      "delete": {
        "tags": [
          "Experience"
        ],
        "summary": "Delete Experience by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience id",
              "format": "uuid"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "Experience Image id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience Image id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "67ce7cdb-35ac-4e5a-97b2-67d5334b2f89"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/experiences/{id}/videos/{videoId}": {
      "delete": {
        "tags": [
          "Experience"
        ],
        "summary": "Delete Experience by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience id",
              "format": "uuid"
            }
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Experience Video id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience Video id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "604d1573-3d7c-4b60-924b-2c5488c64d39"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/experiences": {
      "get": {
        "tags": [
          "Experience"
        ],
        "summary": "Get All Experience by filter with pagination",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "codeRequired",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "a4531ef7-4275-41a5-92f6-23725aed8f00"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedExperienceResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Experience"
        ],
        "summary": "Create Experience",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "299d96c9-0dc6-429d-a22d-d902c4913607"
            }
          }
        ],
        "requestBody": {
          "description": "Experience to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostExperienceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostExperienceResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/experiences/{id}/code": {
      "get": {
        "tags": [
          "Experience"
        ],
        "summary": "Get Experience Code by id",
        "operationId": "GetByIdExperienceCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "b99255e7-5af2-49a6-a17b-e38bfb8a8b22"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdExperienceCodeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/experiences/{id}/activate": {
      "post": {
        "tags": [
          "Experience"
        ],
        "summary": "Activate Experience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "e7851d9a-2a34-44e5-961a-a3a78bdf1693"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/experiences/{id}/code/{code}/check": {
      "post": {
        "tags": [
          "Experience"
        ],
        "summary": "Check Experience Code",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience id",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Experience Code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience Code"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f27a97db-2a3f-438a-addc-2e14f862eb26"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCheckExperienceCodeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/experiences/{id}/images": {
      "post": {
        "tags": [
          "Experience"
        ],
        "summary": "Add images in Experience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "7a8cf086-06bf-42f4-9ff5-9654292ab672"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/experiences/{id}/videos": {
      "post": {
        "tags": [
          "Experience"
        ],
        "summary": "Add videos in an Experience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Experience Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Experience Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "04c71c33-5bc3-4152-9e20-a4b5ac1b11d3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/sponsors/{id}": {
      "delete": {
        "tags": [
          "Sponsor"
        ],
        "summary": "Delete Sponsor by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sponsor id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sponsor id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "a74af9a1-8c74-4d31-ab0f-91cdbe43c692"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Sponsor"
        ],
        "summary": "Get Sponsor by id",
        "operationId": "GetByIdSponsor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sponsor id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sponsor id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "13c03095-5399-4251-97a7-18d1cb915ba0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllSponsorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "Sponsor"
        ],
        "summary": "Update part of Sponsor",
        "description": "Sample request:\r\n            \r\n    PATCH /yes4track/v1/Sponsor/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sponsor id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sponsor id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "c000c1af-52e3-4272-852c-31422c0c1477"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "Sponsor"
        ],
        "summary": "Update Sponsor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sponsor Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sponsor Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "ffd5107a-ec3b-40f2-a4e8-0ec4c206daec"
            }
          }
        ],
        "requestBody": {
          "description": "Sponsor to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutSponsorRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/sponsors": {
      "get": {
        "tags": [
          "Sponsor"
        ],
        "summary": "Get All Sponsor by filter with pagination",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "city",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "8f70e83b-64a5-418e-bba1-eec7d73a15af"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedSponsorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Sponsor"
        ],
        "summary": "Create Sponsor",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "ffb4a2b8-800f-4e5d-b6bd-9960330c64cd"
            }
          }
        ],
        "requestBody": {
          "description": "Sponsor to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSponsorRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostSponsorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/templates/{id}": {
      "delete": {
        "tags": [
          "Template"
        ],
        "summary": "Delete Template by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Template id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "12d127b9-24cc-4275-b372-7771ec9731b8"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Get Template by id",
        "operationId": "GetByIdTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Template id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "a4fe7f80-ba92-45eb-9f59-6c5ddd760cc5"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTemplateResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "Template"
        ],
        "summary": "Update part of Template",
        "description": "Sample request:\r\n            \r\n    PATCH /yes4track/v1/Template/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Template id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "0737e0e1-9c61-45b0-b2f2-dc5812272cec"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "Template"
        ],
        "summary": "Update Template",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Template Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "cb26bf21-5264-4f9f-bc64-ba75fa4b9a72"
            }
          }
        ],
        "requestBody": {
          "description": "Template to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/templates": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Get All Template by filter with pagination",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "462d2a27-e423-4978-a1c2-fe68b8b4f510"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedTemplateResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Create Template",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "e3689e70-1d9b-41da-b296-f048eaa0bdc1"
            }
          }
        ],
        "requestBody": {
          "description": "Template to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTemplateResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/templates/{id}/photos/upload": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Create Template",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Template Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "cf971a77-15da-4477-be5d-467f331fdc06"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/tracks/{id}": {
      "delete": {
        "tags": [
          "Track"
        ],
        "summary": "Delete Track by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Track id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Track id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "80d0013e-3a7b-4d97-8944-f4c2da89d4fb"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Track"
        ],
        "summary": "Get Track by id",
        "operationId": "GetByIdTrack",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Track id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Track id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "5a266bde-8952-4248-943d-263f4e434a53"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTrackResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "Track"
        ],
        "summary": "Update part of Track",
        "description": "Sample request:\r\n            \r\n    PATCH /yes4track/v1/Track/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Track id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Track id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "1b5f3b51-378b-4921-9628-66fbfa60f75d"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "Track"
        ],
        "summary": "Update Track",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Track Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Track Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "121c5573-67dd-47d5-8dc6-db40d58335b2"
            }
          }
        ],
        "requestBody": {
          "description": "Track to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTrackRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/tracks": {
      "get": {
        "tags": [
          "Track"
        ],
        "summary": "Get All Track by filter with pagination",
        "parameters": [
          {
            "name": "adventureId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "source",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TrackSource"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "9adc751d-e820-4659-8c9a-5d69fb23e0ef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedTrackResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Track"
        ],
        "summary": "Create Track",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "c1a79f27-98fb-4f39-8f93-4bc01890ca88"
            }
          }
        ],
        "requestBody": {
          "description": "Track to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTrackRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTrackResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/tracks/{id}/geodata": {
      "get": {
        "tags": [
          "Track"
        ],
        "summary": "Get Track Geo Data by id",
        "operationId": "GetByIdTrackGeoData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Track id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Track id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f06fc324-e97b-4ea3-b69b-3352d672d629"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "200": {
            "description": "Ok - The request has succeeded."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "post": {
        "tags": [
          "Track"
        ],
        "summary": "Create Track GeoData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Track Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Track Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "0ab27f88-f7ee-41b6-a01a-6317996f170d"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTrackGeoDataResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/tracks/{id}/estatistic": {
      "put": {
        "tags": [
          "Track"
        ],
        "summary": "Update Track Estatistic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Track Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Track Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "95b9f4cd-e20f-4729-be4b-a780c476ba9a"
            }
          }
        ],
        "requestBody": {
          "description": "Track to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTrackEstatisticRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/trails/{id}/angel/{angelId}": {
      "delete": {
        "tags": [
          "Trail"
        ],
        "summary": "Delete Trail Angel by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail id",
              "format": "uuid"
            }
          },
          {
            "name": "angelId",
            "in": "path",
            "description": "Angel id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Angel id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "206b2dbd-a68f-4bfb-ad84-717aafdbb511"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "post": {
        "tags": [
          "Trail"
        ],
        "summary": "Add Trail Angel by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail id",
              "format": "uuid"
            }
          },
          {
            "name": "angelId",
            "in": "path",
            "description": "Angel id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Angel id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "5d50bb41-6db5-4035-a6de-be587dc33a52"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/trails/{id}": {
      "delete": {
        "tags": [
          "Trail"
        ],
        "summary": "Delete Trail by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "80298ce4-7189-41fe-9fff-9ce3a2ebf4ef"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "Trail"
        ],
        "summary": "Get Trail by id",
        "operationId": "GetByIdTrail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "c4184648-493f-4f56-8f5b-73c1cbc30563"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTrailResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "Trail"
        ],
        "summary": "Update part of Trail",
        "description": "Sample request:\r\n            \r\n    PATCH /yes4track/v1/Trail/{id}\r\n    [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/atribute_name\",\r\n            \"value\": \"new value\"\r\n        }\r\n    ]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "8ce9513a-01a9-440b-a69e-8897e960a734"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "Trail"
        ],
        "summary": "Update Trail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "a8001330-36b1-45e2-840b-6401aa34fbdc"
            }
          }
        ],
        "requestBody": {
          "description": "Trail to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutTrailRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/trails/{id}/sponsor/{sponsorId}": {
      "delete": {
        "tags": [
          "Trail"
        ],
        "summary": "Delete Trail Sponsor by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail id",
              "format": "uuid"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "description": "Sponsor id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sponsor id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "db554f00-48f3-46a9-8c3e-d3d43bdf4004"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "post": {
        "tags": [
          "Trail"
        ],
        "summary": "Add Trail Sponsor by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail id",
              "format": "uuid"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "description": "Sponsor id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sponsor id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "79571784-3201-43bf-a379-19562d871c4a"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/trails/activeByAngel": {
      "get": {
        "tags": [
          "Trail"
        ],
        "summary": "Get All Active Trail by Angel",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "e624a549-1496-4bb8-acb7-05ef73909af3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllActiveTrailByAngelResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/trails": {
      "get": {
        "tags": [
          "Trail"
        ],
        "summary": "Get All Trail by filter with pagination",
        "parameters": [
          {
            "name": "adventureId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "e05921c2-7d0f-439b-865d-18d1242bf0e7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedTrailResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "Trail"
        ],
        "summary": "Create Trail",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "36c42294-4d34-40e8-84d1-6c35a2a0fe7e"
            }
          }
        ],
        "requestBody": {
          "description": "Trail to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTrailRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTrailResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/trails/{id}/geodata": {
      "get": {
        "tags": [
          "Trail"
        ],
        "summary": "Get Trail Geo Data by id",
        "operationId": "GetByIdTrailGeoData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f8df5405-42ef-41ac-ab98-f1b39ff24e30"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "200": {
            "description": "Ok - The request has succeeded."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "post": {
        "tags": [
          "Trail"
        ],
        "summary": "Create Trail GeoData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "4c336287-120c-473c-86b4-2b69f54046d0"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTrailGeoDataResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/trails/{id}/geodata/chunck": {
      "post": {
        "tags": [
          "Trail"
        ],
        "summary": "Add Chunck Trail GeoData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Trail Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Trail Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "2ba6e143-3e06-4e43-b85f-4b80591398ab"
            }
          }
        ],
        "requestBody": {
          "description": "Object Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTrailChunckGeoDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTrailGeoDataResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/users/{id}/companies/{companyId}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User Company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id User",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id User",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Id Company",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id Company",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f10e6e73-942b-49f8-afdc-793da96431ca"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add User Company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id User",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id User",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Id Company",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id Company",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "6adfd81d-280b-45bc-a6f1-b62fb39c2ff6"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/users/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "366633fe-362b-426f-b8cc-87d20de058db"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User by id",
        "operationId": "GetByIdUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "12086a03-7a61-4f2b-82ec-59fe5c49bfd5"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllUserResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update part of User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "a39c795f-795c-42a1-81d8-88af41a744ba"
            }
          }
        ],
        "requestBody": {
          "description": "Atributes values",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Atributes values"
              }
            }
          },
          "required": true
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "3820c8c6-79ef-40c8-9df0-b67a124aa048"
            }
          }
        ],
        "requestBody": {
          "description": "User to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutUserRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get All User by filter with pagination",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "isAdmin",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting atributes, sample: id.desc,name.asc",
            "schema": {
              "type": "string",
              "description": "Sorting atributes, sample: id.desc,name.asc",
              "nullable": true
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "2e9b08a3-97f1-4b08-9539-8e9e7a87bcaa"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPagedUserResponse"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add User",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "1e4a7290-18de-4df5-863b-e064ef406811"
            }
          }
        ],
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUserResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/users/accesstoken": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User SignIn",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "f01352c9-d296-4569-b6d8-b059a3c33c7e"
            }
          }
        ],
        "requestBody": {
          "description": "User to SignIn",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUserAccessTokenResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/users/resendcode": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Resend Code",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "660223b4-f9ff-4d50-8cc0-0d3d7592153d"
            }
          }
        ],
        "requestBody": {
          "description": "Phone and Hash",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPostUserResendCodeRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/users/setupangel": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Setup User default Angel",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "c1a476bf-a5c8-48f3-84f9-90f525aed8a4"
            }
          }
        ],
        "requestBody": {
          "description": "Angel to Setup",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserSetupAngelRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/users/setupsponsor/{id}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Setup User default Sponsor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sponsor Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sponsor Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "1506cb49-098a-4cac-a83c-535c418c38a4"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/users/signin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User SignIn",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "14f6eebc-b474-473a-90fc-448c52bfd2ee"
            }
          }
        ],
        "requestBody": {
          "description": "User to SignIn",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserSignInRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUserSignInResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "200": {
            "description": "Ok - The request has succeeded."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    },
    "/yes4track/v1/users/signup": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User SignUp",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "fdad439c-68b7-4016-934d-58249f461e18"
            }
          }
        ],
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a POST request, or after some PUT requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUserResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          }
        }
      }
    },
    "/yes4track/v1/users/{id}/location": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User Location",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your Api Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-csrf-token",
            "in": "header",
            "description": "CSRF Protection",
            "schema": {
              "type": "string",
              "default": "b142da1e-7bc1-4bb0-a02e-ae79fad0ba9d"
            }
          }
        ],
        "requestBody": {
          "description": "GeoLocation and Date",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutUserLocationRequest"
              }
            }
          }
        },
        "responses": {
          "412": {
            "description": "Precondition Failed - The client has indicated preconditions in its headers which the server does not meet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Intertal Server Error - The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content - There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
          },
          "400": {
            "description": "Bad Request – This means that client-side input fails validation."
          },
          "401": {
            "description": "Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated."
          },
          "403": {
            "description": "Forbidden – This means the user is authenticated, but it’s not allowed to access a resource."
          },
          "404": {
            "description": "Not Found – The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorDetails": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LevelType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ImageUrl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "format": "uuid"
          },
          "userUpdated": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VideoUrl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "format": "uuid"
          },
          "userUpdated": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetAllAdventureResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "$ref": "#/components/schemas/LevelType"
          },
          "effectiveStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "likes": {
            "type": "integer",
            "format": "int64"
          },
          "imagesUrl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageUrl"
            },
            "nullable": true
          },
          "videosUrl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoUrl"
            },
            "nullable": true
          },
          "codeRequired": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "experiences": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutAdventureRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "$ref": "#/components/schemas/LevelType"
          },
          "effectiveStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetAllAdventureLikesResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "userPhoto": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedAdventureLikesResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllAdventureLikesResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostAdventureLikesResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "userPhoto": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedAdventureResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllAdventureResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostAdventureRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "$ref": "#/components/schemas/LevelType"
          },
          "effectiveStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "codeRequired": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PostAdventureResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "$ref": "#/components/schemas/LevelType"
          },
          "effectiveStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "likes": {
            "type": "integer",
            "format": "int64"
          },
          "codeRequired": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetByIdAdventureCodeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostCheckAdventureCodeResponse": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ActionType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "GetAllAuditResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "format": "uuid"
          },
          "entity": {
            "type": "string",
            "nullable": true
          },
          "action": {
            "$ref": "#/components/schemas/ActionType"
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedAuditResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllAuditResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "GetAllCardResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/CardType"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutCardRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/CardType"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedCardResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllCardResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostCardRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/CardType"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostCardResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/CardType"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllCompanyResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "fantasyName": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PutCompanyRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "fantasyName": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedCompanyResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllCompanyResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostCompanyRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "fantasyName": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostCompanyResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "legalName": {
            "type": "string",
            "nullable": true
          },
          "fantasyName": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetAllExperienceResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "effectiveStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "imagesUrl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageUrl"
            },
            "nullable": true
          },
          "videosUrl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoUrl"
            },
            "nullable": true
          },
          "codeRequired": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PutExperienceRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "effectiveStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedExperienceResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllExperienceResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostExperienceRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "effectiveStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "codeRequired": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PostExperienceResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "effectiveStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "codeRequired": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetByIdExperienceCodeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostCheckExperienceCodeResponse": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SponsorContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeoJson2DGeographicCoordinates": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true,
            "readOnly": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GeoJson2DGeographicCoordinatesGeoJsonBoundingBox": {
        "type": "object",
        "properties": {
          "max": {
            "$ref": "#/components/schemas/GeoJson2DGeographicCoordinates"
          },
          "min": {
            "$ref": "#/components/schemas/GeoJson2DGeographicCoordinates"
          }
        },
        "additionalProperties": false
      },
      "GeoJsonCoordinateReferenceSystem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Decimal128": {
        "type": "object",
        "additionalProperties": false
      },
      "ObjectId": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "machine": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "deprecated": true
          },
          "pid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "deprecated": true
          },
          "increment": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "deprecated": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RegexOptions": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          256,
          512
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "days": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hours": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "seconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Regex": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/RegexOptions"
          },
          "rightToLeft": {
            "type": "boolean",
            "readOnly": true
          },
          "matchTimeout": {
            "$ref": "#/components/schemas/TimeSpan"
          }
        },
        "additionalProperties": false
      },
      "BsonType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          127,
          255
        ],
        "type": "integer",
        "format": "int32"
      },
      "BsonUndefined": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          }
        },
        "additionalProperties": false
      },
      "BsonTimestamp": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          },
          "value": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "increment": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BsonSymbol": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BsonRegularExpression": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          },
          "pattern": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "options": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BsonNull": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          }
        },
        "additionalProperties": false
      },
      "BsonMinKey": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          }
        },
        "additionalProperties": false
      },
      "BsonMaxKey": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          }
        },
        "additionalProperties": false
      },
      "BsonJavaScriptWithScope": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          },
          "scope": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BsonJavaScript": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BsonDateTime": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "millisecondsSinceEpoch": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "value": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "GuidRepresentation": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "BsonBinarySubType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          128
        ],
        "type": "integer",
        "format": "int32"
      },
      "BsonBinaryData": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          },
          "bytes": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "guidRepresentation": {
            "$ref": "#/components/schemas/GuidRepresentation"
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "subType": {
            "$ref": "#/components/schemas/BsonBinarySubType"
          }
        },
        "additionalProperties": false
      },
      "BsonValue": {
        "type": "object",
        "properties": {
          "asBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "asBsonArray": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonBinaryData": {
            "$ref": "#/components/schemas/BsonBinaryData"
          },
          "asBsonDateTime": {
            "$ref": "#/components/schemas/BsonDateTime"
          },
          "asBsonDocument": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "asBsonJavaScript": {
            "$ref": "#/components/schemas/BsonJavaScript"
          },
          "asBsonJavaScriptWithScope": {
            "$ref": "#/components/schemas/BsonJavaScriptWithScope"
          },
          "asBsonMaxKey": {
            "$ref": "#/components/schemas/BsonMaxKey"
          },
          "asBsonMinKey": {
            "$ref": "#/components/schemas/BsonMinKey"
          },
          "asBsonNull": {
            "$ref": "#/components/schemas/BsonNull"
          },
          "asBsonRegularExpression": {
            "$ref": "#/components/schemas/BsonRegularExpression"
          },
          "asBsonSymbol": {
            "$ref": "#/components/schemas/BsonSymbol"
          },
          "asBsonTimestamp": {
            "$ref": "#/components/schemas/BsonTimestamp"
          },
          "asBsonUndefined": {
            "$ref": "#/components/schemas/BsonUndefined"
          },
          "asBsonValue": {
            "$ref": "#/components/schemas/BsonValue"
          },
          "asByteArray": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "asDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asDecimal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asDouble": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "asGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "asInt32": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "asLocalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "asInt64": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "asNullableBoolean": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "asNullableDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableDecimal128": {
            "$ref": "#/components/schemas/Decimal128"
          },
          "asNullableDouble": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "asNullableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt32": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asNullableInt64": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "asNullableObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asObjectId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "asRegex": {
            "$ref": "#/components/schemas/Regex"
          },
          "asString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "asUniversalTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "deprecated": true
          },
          "bsonType": {
            "$ref": "#/components/schemas/BsonType"
          },
          "isBoolean": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonBinaryData": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonDocument": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScript": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonJavaScriptWithScope": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMaxKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonMinKey": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonNull": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonRegularExpression": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonSymbol": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonTimestamp": {
            "type": "boolean",
            "readOnly": true
          },
          "isBsonUndefined": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateTime": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isDecimal128": {
            "type": "boolean",
            "readOnly": true
          },
          "isDouble": {
            "type": "boolean",
            "readOnly": true
          },
          "isGuid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt32": {
            "type": "boolean",
            "readOnly": true
          },
          "isInt64": {
            "type": "boolean",
            "readOnly": true
          },
          "isNumeric": {
            "type": "boolean",
            "readOnly": true
          },
          "isObjectId": {
            "type": "boolean",
            "readOnly": true
          },
          "isString": {
            "type": "boolean",
            "readOnly": true
          },
          "isValidDateTime": {
            "type": "boolean",
            "readOnly": true
          },
          "rawValue": {
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "BsonElement": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "$ref": "#/components/schemas/BsonValue"
          }
        },
        "additionalProperties": false
      },
      "GeoJsonObjectType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "type": "integer",
        "format": "int32"
      },
      "GeoJson2DGeographicCoordinatesGeoJsonPoint": {
        "type": "object",
        "properties": {
          "boundingBox": {
            "$ref": "#/components/schemas/GeoJson2DGeographicCoordinatesGeoJsonBoundingBox"
          },
          "coordinateReferenceSystem": {
            "$ref": "#/components/schemas/GeoJsonCoordinateReferenceSystem"
          },
          "extraMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BsonElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "coordinates": {
            "$ref": "#/components/schemas/GeoJson2DGeographicCoordinates"
          },
          "type": {
            "$ref": "#/components/schemas/GeoJsonObjectType"
          }
        },
        "additionalProperties": false
      },
      "Address": {
        "type": "object",
        "properties": {
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "complement": {
            "type": "string",
            "nullable": true
          },
          "neighborhood": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/GeoJson2DGeographicCoordinatesGeoJsonPoint"
          }
        },
        "additionalProperties": false
      },
      "GetAllSponsorResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorContact"
            },
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "photoUrl": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ProfilePhotoRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutSponsorRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorContact"
            },
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "profilePhoto": {
            "$ref": "#/components/schemas/ProfilePhotoRequest"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedSponsorResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllSponsorResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostSponsorRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorContact"
            },
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "profilePhoto": {
            "$ref": "#/components/schemas/ProfilePhotoRequest"
          }
        },
        "additionalProperties": false
      },
      "PostSponsorResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorContact"
            },
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "photoUrl": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetAllTemplateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutTemplateRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedTemplateResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllTemplateResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostTemplateRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostTemplateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrackSource": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Estatistic": {
        "type": "object",
        "properties": {
          "totalTime": {
            "type": "number",
            "format": "double"
          },
          "totalMovingTime": {
            "type": "number",
            "format": "double"
          },
          "totalDistance": {
            "type": "number",
            "format": "double"
          },
          "elevationGain": {
            "type": "number",
            "format": "double"
          },
          "speed": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "MapCoordinate": {
        "type": "object",
        "properties": {
          "maxLongitude": {
            "type": "number",
            "format": "double"
          },
          "maxLatitude": {
            "type": "number",
            "format": "double"
          },
          "minLongitude": {
            "type": "number",
            "format": "double"
          },
          "minLatitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GetAllTrackResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TrackSource"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "estatistic": {
            "$ref": "#/components/schemas/Estatistic"
          },
          "mapCoordinate": {
            "$ref": "#/components/schemas/MapCoordinate"
          }
        },
        "additionalProperties": false
      },
      "PutTrackRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TrackSource"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedTrackResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllTrackResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostTrackRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TrackSource"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostTrackResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TrackSource"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PostTrackGeoDataResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "trackId": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutTrackEstatisticRequest": {
        "type": "object",
        "properties": {
          "totalTime": {
            "type": "number",
            "format": "double"
          },
          "totalMovingTime": {
            "type": "number",
            "format": "double"
          },
          "totalDistance": {
            "type": "number",
            "format": "double"
          },
          "elevationGain": {
            "type": "number",
            "format": "double"
          },
          "speed": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GetAllTrailResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "estatistic": {
            "$ref": "#/components/schemas/Estatistic"
          },
          "sponsors": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "angels": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutTrailRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "TrailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estatistic": {
            "$ref": "#/components/schemas/Estatistic"
          }
        },
        "additionalProperties": false
      },
      "GeoLocation": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "elevation": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "photoUrl": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        },
        "additionalProperties": false
      },
      "AdventureResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "$ref": "#/components/schemas/LevelType"
          }
        },
        "additionalProperties": false
      },
      "UserTrailStatusResponse": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "GetAllActiveTrailByAngelResponse": {
        "type": "object",
        "properties": {
          "trail": {
            "$ref": "#/components/schemas/TrailResponse"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "adventure": {
            "$ref": "#/components/schemas/AdventureResponse"
          },
          "status": {
            "$ref": "#/components/schemas/UserTrailStatusResponse"
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedTrailResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllTrailResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostTrailRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostTrailResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "adventureId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "sponsors": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "angels": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostTrailGeoDataResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "trailId": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrailGeoDataRequest": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "elevation": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PostTrailChunckGeoDataRequest": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrailGeoDataRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllUserResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "photoUrl": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "isSuperAdmin": {
            "type": "boolean"
          },
          "isAngel": {
            "type": "boolean"
          },
          "defaultAngel": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "defaultSponsor": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutUserRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "profilePhoto": {
            "$ref": "#/components/schemas/ProfilePhotoRequest"
          }
        },
        "additionalProperties": false
      },
      "GetAllPagedUserResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "lastRowOnPage": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllUserResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostUserRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "profilePhoto": {
            "$ref": "#/components/schemas/ProfilePhotoRequest"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "isSuperAdmin": {
            "type": "boolean"
          },
          "isAngel": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PostUserResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "photoUrl": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "isSuperAdmin": {
            "type": "boolean"
          },
          "isAngel": {
            "type": "boolean"
          },
          "defaultAngel": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "defaultSponsor": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostUserAccessTokenRequest": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostUserAccessTokenResponse": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostPostUserResendCodeRequest": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostUserSetupAngelRequest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userCreated": {
            "type": "string",
            "nullable": true
          },
          "userUpdated": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostUserSignInRequest": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostUserSignInResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "PutUserLocationRequest": {
        "required": [
          "date",
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}